t2 = r0 - r1
t3 = r0 + r1
t5 = t2 / t3
t6 = 0.1e1 + t5
t7 = t6 <= p_a_zeta_threshold
t8 = jnp.logical_or(r0 <= p_a_dens_threshold, t7)
t9 = lax_cond(t7, p_a_zeta_threshold, t6)
t10 = 3 ** (0.1e1 / 0.3e1)
t12 = (0.1e1 / math.pi) ** (0.1e1 / 0.3e1)
t13 = t10 * t12
t14 = 4 ** (0.1e1 / 0.3e1)
t15 = t14 ** 2
t16 = t13 * t15
t17 = t3 ** (0.1e1 / 0.3e1)
t18 = 0.1e1 / t17
t19 = 2 ** (0.1e1 / 0.3e1)
t20 = t18 * t19
t21 = p_a_zeta_threshold ** (0.1e1 / 0.3e1)
t22 = 0.1e1 / t21
t23 = t6 ** (0.1e1 / 0.3e1)
t25 = lax_cond(t7, t22, 0.1e1 / t23)
t27 = t16 * t20 * t25
t30 = math.sqrt(t27)
t33 = t27 ** 0.15e1
t35 = t10 ** 2
t36 = t12 ** 2
t37 = t35 * t36
t38 = t37 * t14
t39 = t17 ** 2
t40 = 0.1e1 / t39
t41 = t19 ** 2
t42 = t40 * t41
t43 = t25 ** 2
t45 = t38 * t42 * t43
t51 = math.log(0.1e1 + 0.16081979498692535067e2 / (0.37978500000000000000e1 * t30 + 0.89690000000000000000e0 * t27 + 0.20477500000000000000e0 * t33 + 0.12323500000000000000e0 * t45))
t53 = 0.621814e-1 * (0.1e1 + 0.53425000000000000000e-1 * t27) * t51
t55 = t21 * p_a_zeta_threshold
t57 = lax_cond(0.2e1 <= p_a_zeta_threshold, t55, 0.2e1 * t19)
t59 = lax_cond(0.0e0 <= p_a_zeta_threshold, t55, 0)
t63 = 0.1e1 / (0.2e1 * t19 - 0.2e1)
t64 = (t57 + t59 - 0.2e1) * t63
t75 = math.log(0.1e1 + 0.32163958997385070134e2 / (0.70594500000000000000e1 * t30 + 0.15494250000000000000e1 * t27 + 0.42077500000000000000e0 * t33 + 0.15629250000000000000e0 * t45))
t88 = math.log(0.1e1 + 0.29608749977793437516e2 / (0.51785000000000000000e1 * t30 + 0.90577500000000000000e0 * t27 + 0.11003250000000000000e0 * t33 + 0.12417750000000000000e0 * t45))
t89 = (0.1e1 + 0.27812500000000000000e-1 * t27) * t88
t98 = lax_cond(t8, 0, t9 * (-t53 + t64 * (-0.3109070e-1 * (0.1e1 + 0.51370000000000000000e-1 * t27) * t75 + t53 - 0.19751673498613801407e-1 * t89) + 0.19751673498613801407e-1 * t64 * t89) / 0.2e1)
t99 = params_a_css[0]
t101 = params_a_css[1] * params_a_gamma_ss
t102 = r0 ** 2
t103 = r0 ** (0.1e1 / 0.3e1)
t104 = t103 ** 2
t106 = 0.1e1 / t104 / t102
t107 = s0 * t106
t110 = params_a_gamma_ss * s0 * t106 + 0.1e1
t115 = params_a_gamma_ss ** 2
t116 = params_a_css[2] * t115
t117 = s0 ** 2
t118 = t102 ** 2
t121 = 0.1e1 / t103 / t118 / r0
t123 = t110 ** 2
t129 = params_a_css[3] * t115 * params_a_gamma_ss
t131 = t118 ** 2
t139 = t115 ** 2
t140 = params_a_css[4] * t139
t141 = t117 ** 2
t146 = t123 ** 2
t157 = 0.1e1 - s0 / r0 / tau0 / 0.8e1
t158 = tau0 ** 2
t163 = params_a_Fermi_D_cnst ** 2
t164 = 0.1e1 / t163
t167 = math.exp(-0.4e1 * t158 / t103 / t102 / r0 * t164)
t172 = 0.1e1 - t5
t173 = t172 <= p_a_zeta_threshold
t174 = jnp.logical_or(r1 <= p_a_dens_threshold, t173)
t175 = lax_cond(t173, p_a_zeta_threshold, t172)
t176 = t172 ** (0.1e1 / 0.3e1)
t178 = lax_cond(t173, t22, 0.1e1 / t176)
t180 = t16 * t20 * t178
t183 = math.sqrt(t180)
t186 = t180 ** 0.15e1
t188 = t178 ** 2
t190 = t38 * t42 * t188
t196 = math.log(0.1e1 + 0.16081979498692535067e2 / (0.37978500000000000000e1 * t183 + 0.89690000000000000000e0 * t180 + 0.20477500000000000000e0 * t186 + 0.12323500000000000000e0 * t190))
t198 = 0.621814e-1 * (0.1e1 + 0.53425000000000000000e-1 * t180) * t196
t209 = math.log(0.1e1 + 0.32163958997385070134e2 / (0.70594500000000000000e1 * t183 + 0.15494250000000000000e1 * t180 + 0.42077500000000000000e0 * t186 + 0.15629250000000000000e0 * t190))
t222 = math.log(0.1e1 + 0.29608749977793437516e2 / (0.51785000000000000000e1 * t183 + 0.90577500000000000000e0 * t180 + 0.11003250000000000000e0 * t186 + 0.12417750000000000000e0 * t190))
t223 = (0.1e1 + 0.27812500000000000000e-1 * t180) * t222
t232 = lax_cond(t174, 0, t175 * (-t198 + t64 * (-0.3109070e-1 * (0.1e1 + 0.51370000000000000000e-1 * t180) * t209 + t198 - 0.19751673498613801407e-1 * t223) + 0.19751673498613801407e-1 * t64 * t223) / 0.2e1)
t233 = r1 ** 2
t234 = r1 ** (0.1e1 / 0.3e1)
t235 = t234 ** 2
t237 = 0.1e1 / t235 / t233
t238 = s2 * t237
t241 = params_a_gamma_ss * s2 * t237 + 0.1e1
t245 = s2 ** 2
t246 = t233 ** 2
t249 = 0.1e1 / t234 / t246 / r1
t251 = t241 ** 2
t256 = t246 ** 2
t263 = t245 ** 2
t268 = t251 ** 2
t279 = 0.1e1 - s2 / r1 / tau1 / 0.8e1
t280 = tau1 ** 2
t287 = math.exp(-0.4e1 * t280 / t234 / t233 / r1 * t164)
t292 = t13 * t15 * t18
t295 = math.sqrt(t292)
t298 = t292 ** 0.15e1
t301 = t37 * t14 * t40
t307 = math.log(0.1e1 + 0.16081979498692535067e2 / (0.37978500000000000000e1 * t295 + 0.89690000000000000000e0 * t292 + 0.20477500000000000000e0 * t298 + 0.12323500000000000000e0 * t301))
t309 = 0.621814e-1 * (0.1e1 + 0.53425000000000000000e-1 * t292) * t307
t310 = t2 ** 2
t311 = t310 ** 2
t312 = t3 ** 2
t313 = t312 ** 2
t317 = lax_cond(t7, t55, t23 * t6)
t319 = lax_cond(t173, t55, t176 * t172)
t321 = (t317 + t319 - 0.2e1) * t63
t332 = math.log(0.1e1 + 0.32163958997385070134e2 / (0.70594500000000000000e1 * t295 + 0.15494250000000000000e1 * t292 + 0.42077500000000000000e0 * t298 + 0.15629250000000000000e0 * t301))
t345 = math.log(0.1e1 + 0.29608749977793437516e2 / (0.51785000000000000000e1 * t295 + 0.90577500000000000000e0 * t292 + 0.11003250000000000000e0 * t298 + 0.12417750000000000000e0 * t301))
t346 = (0.1e1 + 0.27812500000000000000e-1 * t292) * t345
t353 = -t309 + t311 / t313 * t321 * (-0.3109070e-1 * (0.1e1 + 0.51370000000000000000e-1 * t292) * t332 + t309 - 0.19751673498613801407e-1 * t346) + 0.19751673498613801407e-1 * t321 * t346 - t98 - t232
t357 = t107 + t238
t359 = params_a_gamma_ab * t357 + 0.1e1
t364 = params_a_gamma_ab ** 2
t366 = t357 ** 2
t367 = t359 ** 2
t380 = t364 ** 2
t382 = t366 ** 2
t383 = t367 ** 2
t389 = params_a_dss[0]
t393 = 0.2e1 * tau0 / t104 / r0
t394 = 6 ** (0.1e1 / 0.3e1)
t395 = t394 ** 2
t396 = math.pi ** 2
t397 = t396 ** (0.1e1 / 0.3e1)
t398 = t397 ** 2
t399 = t395 * t398
t400 = 0.3e1 / 0.5e1 * t399
t403 = 0.1e1 + params_a_alpha_ss * (t107 + t393 - t400)
t406 = params_a_dss[1]
t409 = params_a_dss[2]
t410 = t393 - t400
t413 = t403 ** 2
t416 = params_a_dss[3]
t419 = params_a_dss[4]
t423 = params_a_dss[5]
t424 = t410 ** 2
t436 = 0.2e1 * tau1 / t235 / r1
t439 = 0.1e1 + params_a_alpha_ss * (t238 + t436 - t400)
t444 = t436 - t400
t447 = t439 ** 2
t455 = t444 ** 2
t465 = 0.6e1 / 0.5e1 * t399
t468 = 0.1e1 + params_a_alpha_ab * (t107 + t238 + t393 + t436 - t465)
t474 = t393 + t436 - t465
t477 = t468 ** 2
t486 = t474 ** 2
res = t98 * (t99 + t101 * t107 / t110 + t116 * t117 * t121 / t123 + t129 * t117 * s0 / t131 / t123 / t110 + t140 * t141 / t104 / t131 / t102 / t146) * t157 * (0.1e1 - t167) + t232 * (t99 + t101 * t238 / t241 + t116 * t245 * t249 / t251 + t129 * t245 * s2 / t256 / t251 / t241 + t140 * t263 / t235 / t256 / t233 / t268) * t279 * (0.1e1 - t287) + t353 * (params_a_cab[0] + params_a_cab[1] * params_a_gamma_ab * t357 / t359 + params_a_cab[2] * t364 * t366 / t367 + params_a_cab[3] * t364 * params_a_gamma_ab * t366 * t357 / t367 / t359 + params_a_cab[4] * t380 * t382 / t383) + t98 * (t389 / t403 + (t406 * s0 * t106 + t409 * t410) / t413 + (t419 * s0 * t106 * t410 + t416 * t117 * t121 + t423 * t424) / t413 / t403) * t157 + t232 * (t389 / t439 + (t406 * s2 * t237 + t409 * t444) / t447 + (t419 * s2 * t237 * t444 + t416 * t245 * t249 + t423 * t455) / t447 / t439) * t279 + t353 * (params_a_dab[0] / t468 + (params_a_dab[1] * t357 + params_a_dab[2] * t474) / t477 + (params_a_dab[4] * t357 * t474 + params_a_dab[3] * t366 + params_a_dab[5] * t486) / t477 / t468)
