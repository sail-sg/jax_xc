import jax
import jax.numpy as jnp
import ctypes
from collections import namedtuple
from typing import Callable, Optional
from . import impl
from .utils import get_p, rho_to_arguments, call_functional, add_hyb_params

{% for name, ext_params, maple_name, ext_params_descriptions, info, aux_info in functionals %}
def {{ name }}(
  rho: Callable,
  polarized: bool = True,
  mo: Optional[Callable] = None,
{% for param_name in ext_params.keys() %}
  {{ param_name }}: Optional[float] = None,
{% endfor %}
) -> Callable:
  r"""
  {% for url, doi, ref in info %}
  {{ ref }}
  {% if url != "" %}
  `{{ doi }} <{{ url }}>`_
  {% else %}
  {{ doi }}
  {% endif %}

  {% endfor %}
  {% if aux_info != [] %}
  Hybrid Functionals:

  {% for fn_aux_name, mix_coef in aux_info %}
    {% if maple_name == "DEORBITALIZE" %}
    {{ fn_aux_name }} (Mixing Coefficient is meaningless for DEORBITALIZE functional)
    {% else %}
    {{ fn_aux_name }} (Mixing Coefficient: {{ mix_coef }})
    {% endif %}

  {% endfor %}
  {% endif %}
  Parameters
  ----------
  rho : Callable
      The electron density function, mapping 3D coordinate to a density value.
      If polarized returns one value for each spin, :math:`\rho\in R^3 \rightarrow R^2`,
      otherwise, :math:`\rho\in R^3 \rightarrow R`.
  polarized : bool
      Whether the calculation is polarized.
  mo : Optional[Callable]
      Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
      :math:`N` is the number of orbitals. It is only needed for
      mgga functionals.
{% for (param_name, param_val), param_descrip in zip(ext_params.items(), ext_params_descriptions) %}
  {{ param_name }} : Optional[float], default: {{ param_val }}
      {{ param_descrip }}
{% endfor %}
  """
{% for param_name, value in ext_params.items() %}
  {{ param_name }} = ({{ param_name }} or {{ value }})
{% endfor %}
  p = get_p("{{ name }}", polarized, {{ ext_params.keys()|join(', ') }})
  
  {% if aux_info != [] %}
  @add_hyb_params(p)
  {% endif %}
  def _{{ name }}(r):
    return jax.lax.cond(
        jnp.sum(rho(r)) < p.dens_threshold,
        lambda _: 0.,
        lambda _: call_functional(p, rho, r, polarized, mo),
        operand=None
    )
  return _{{ name }}

{% endfor %}
