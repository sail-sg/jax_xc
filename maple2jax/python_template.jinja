import jax
import jax.numpy as jnp
import ctypes
from collections import namedtuple
from typing import Callable, Optional
from . import impl
from .utils import get_p

def invoke(p, rho, r, mo=None):
  if p.maple_name == "DEORBITALIZE":
    p0, p1 = (p.func_aux[0], p.func_aux[1])
    deo = invoke(p1, rho, r, mo)
    return invoke(p0, rho, r, mo, deo)
  elif p.maple_name == "":
    return sum(
      [
        coeff * invoke(fn_p, rho, r, mo)
        for fn_p, coeff in zip(p.func_aux, p.mix_coef)
      ]
    )
  else:
    return getattr(impl, p.maple_name).invoke(p, rho, r, mo)
  

{% for p, ext_params, ext_params_descriptions, info in functionals %}
def {{ p.name }}(
  polarized: bool = True,
{% for param_name in ext_params.keys() %}
  {{ param_name }}: Optional[float] = None,
{% endfor %}
) -> Callable:
  r"""
  {% for url, doi, ref in info %}
  {{ ref }}
  {% if url != "" %}
  `{{ doi }} <{{ url }}>`_
  {% else %}
  {{ doi }}
  {% endif %}

  {% endfor %}
  
  {% if p.maple_name == "" %}
  Mixing of the following functionals:
  {% for fn_p, coeff in zip(p.func_aux, p.mix_coef) %}
    {{ fn_p.name }} (coefficient: {{ coeff }})
  {% endfor %}
  {% endif %}
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
{% for (param_name, param_val), param_descrip in zip(ext_params.items(), ext_params_descriptions) %}
  {{ param_name }} : Optional[float], default: {{ param_val }}
    {{ param_descrip }}
{% endfor %}
  """
{% for param_name, value in ext_params.items() %}
  {{ param_name }} = ({{ param_name }} or {{ value }})
{% endfor %}
  p = get_p("{{ p.name }}", polarized, {{ ext_params.keys()|join(', ') }})
  def _{{ p.name }}_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of {{ p.name }}.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r{% if p.type == "mgga" %}, mo{% endif %})
  
{% if p.maple_name == "" %}
  _{{ p.name }}_epsilon_xc.cam_alpha = p.cam_alpha
  _{{ p.name }}_epsilon_xc.cam_beta = p.cam_beta
  _{{ p.name }}_epsilon_xc.cam_omega = p.cam_omega
  _{{ p.name }}_epsilon_xc.nlc_b = p.nlc_b
  _{{ p.name }}_epsilon_xc.nlc_C = p.nlc_C
{% endif %}

  return _{{ p.name }}_epsilon_xc

{% endfor %}
