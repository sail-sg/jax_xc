t4 = 3 ** (0.1e1 / 0.3e1)
t5 = math.pi ** (0.1e1 / 0.3e1)
t8 = 0.1e1 <= p_a_zeta_threshold
t9 = p_a_zeta_threshold - 0.1e1
t12 = lax_cond(t8, -t9, 0)
t13 = lax_cond(t8, t9, t12)
t14 = 0.1e1 + t13
t15 = t14 <= p_a_zeta_threshold
t16 = p_a_zeta_threshold ** (0.1e1 / 0.3e1)
t18 = t14 ** (0.1e1 / 0.3e1)
t20 = lax_cond(t15, t16 * p_a_zeta_threshold, t18 * t14)
t21 = r0 ** (0.1e1 / 0.3e1)
t23 = t4 ** 2
t24 = p_a_cam_omega * t23
t25 = math.pi ** 2
t26 = t25 ** (0.1e1 / 0.3e1)
t27 = 0.1e1 / t26
t28 = lax_cond(t15, t16, t18)
t30 = t27 / t28
t31 = 0.1e1 / t21
t34 = t24 * t30 * t31 / 0.3e1
t35 = 0.14e2 < t34
t36 = 6 ** (0.1e1 / 0.3e1)
t37 = t36 ** 2
t39 = math.sqrt(s0)
t40 = 2 ** (0.1e1 / 0.3e1)
t46 = t37 * t27 * t39 * t40 / t21 / r0 / 0.12e2
t48 = 0.15e2 < t46
t49 = lax_cond(t48, 15, t46)
t51 = lax_cond(0.1e1 < t49, t49, 1)
t53 = math.exp(t51 - 0.8572844e1)
t55 = math.log(0.1e1 + t53)
t57 = lax_cond(t48, 0.8572844e1, t51 - t55)
t58 = lax_cond(t46 < 0.1e1, t46, t57)
t60 = lax_cond(t58 < 0.1e-14, 0.1e-14, t58)
t61 = t60 ** 2
t63 = t61 ** 2
t65 = 0.979681e-2 * t61 + 0.410834e-1 * t63
t73 = 0.1e1 / (0.1e1 + 0.187440e0 * t63 + 0.120824e-2 * t63 * t60 + 0.347188e-1 * t63 * t61)
t74 = t61 * t65 * t73
t75 = 0.22143176004591608976e1 * t74
t77 = lax_cond(t34 < 0.14e2, 0.1455915450052607e1, 2)
t78 = p_a_cam_omega ** 2
t81 = t26 ** 2
t83 = t28 ** 2
t86 = t21 ** 2
t88 = 0.1e1 / t81 / t83 / t86
t89 = t77 * t78 * t4 * t88
t92 = xc_E1_scaled(t75 + 0.73810586681972029922e0 * t89)
t94 = t89 / 0.3e1
t96 = math.log(0.57786348e0 + t74 + t94)
t99 = math.log(t74 + t94)
t102 = lax_cond(t35, 14, t34)
t104 = t102 ** 2
t105 = t104 * t102
t107 = t104 ** 2
t108 = t107 * t102
t110 = t107 * t105
t115 = lax_cond(t102 < 0.14e2, 0.1455915450052607e1, 2)
t116 = t115 * t104
t118 = t75 + 0.22143176004591608976e1 * t116
t119 = math.sqrt(t118)
t120 = xc_erfcx(t119)
t125 = t107 * t104
t127 = t107 ** 2
t130 = xc_E1_scaled(t118)
t133 = math.sqrt(math.pi)
t134 = 0.57786348e0 + t74 + t116
t135 = math.sqrt(t134)
t140 = 0.1e1 / t134
t143 = t74 + t116
t144 = math.sqrt(t143)
t156 = t134 ** 2
t161 = t135 * t156
t167 = t144 * t143
t177 = t156 * t134
t182 = t143 ** 2
t188 = t144 * t182
t190 = t135 * t177
t205 = t156 ** 2
t209 = t182 * t143
t225 = math.log(t143 * t140)
t227 = (0.17059169152930056821e1 * t102 - 0.41622705406440396562e1 * t105 + 0.42174370348694648999e1 * t108 - 0.10676080470633097775e1 * t110) * math.pi * t120 / 0.2e1 - (-0.10161144e1 + 0.32686565979666847500e1 * t104 - 0.48418398881417585092e1 * t107 + 0.27236365685865660550e1 * t125 - 0.20524577845574895866e0 * t127) * t130 / 0.2e1 - 0.57320229933645902590e0 * t133 / t135 * t102 + 0.73807311952199090995e0 * t140 * t104 - 0.1243162299390327e1 * t133 * (-0.9e1 / 0.8e1 / t144 + 0.254028600e0 / t135 / t134) * t105 + (-0.10933029406300511250e1 / t143 + 0.49374260512735112038e0 / t156) * t107 - 0.52484962540331303985e-1 * t133 * (0.3e1 * t161 * (0.9e1 * t74 + 0.9e1 * t116 - 0.20322288e1) + 0.412995389554944e1 * t167) / t161 / t167 * t108 + (0.25085884618821050197e0 / t177 + 0.77150160881310000000e-2 * (-0.36e2 + 0.79715433616529792314e2 * t74) / t182) * t125 + 0.14762353927435135389e-2 * t133 * (-0.41965056246038818960e2 * t188 + 0.9e1 * t190 * (0.27e2 * t182 - 0.60966864e1 * t74 - 0.60966864e1 * t116 + 0.412995389554944e1)) / t190 / t188 * t110 + 0.75666704254679261017e-2 * (0.81278266164980202635e2 * t115 * t205 * t143 + 0.33847844843765416574e1 * t209 + 0.8401793031216e-2 * t205 * (-0.729e3 * t182 + 0.3292210656e3 * t74 + 0.3292210656e3 * t116 - 0.29735668047955968e3)) / t205 / t209 * t127 + 0.50805720000000000000e0 * t225
t228 = lax_cond(t35, 0.50805720000000000000e0 * t92 - 0.50805720000000000000e0 * t96 + 0.50805720000000000000e0 * t99, t227)
t230 = 0.57786348e0 + t74
t231 = t230 ** 2
t233 = 0.77215461e-1 * t74
t237 = 0.64753871e1 * t65 * t73 + 0.47965830e0
t247 = t231 * t230
t251 = math.sqrt(t230)
t252 = t251 * t247
t256 = math.exp(t75)
t258 = math.sqrt(t74)
t260 = math.erf(0.14880583323442535321e1 * t258)
t274 = lax_cond(0.8e-1 < t60, -0.16e2 / 0.15e2 * (0.3e1 / 0.4e1 * math.pi + t133 * (-0.779335965e0 - 0.463292766e0 * (t237 * t61 + 0.1e1) * t230 - 0.148683344e1 * t231 + 0.81289152e1 * t247) / t252 / 0.16e2 - 0.75601874976749088562e0 * math.pi * t256 * (0.1e1 - t260)) / t133 / t61 * t252, -0.2628417880e-1 - 0.7117647788e-1 * t61 + 0.8534541323e-1 * t63)
t275 = t61 * t274
t278 = 0.1e1 / t247
t283 = t78 * t4 * t88
t285 = 0.57786348e0 + t74 + t283 / 0.3e1
t286 = t285 ** 2
t291 = t285 * t61 * t237
t297 = math.sqrt(t285)
t299 = 0.1e1 / t297 / t286
t321 = t78 ** 2
t326 = t83 ** 2
t343 = lax_cond(r0 / 0.2e1 <= p_a_dens_threshold, 0, -0.3e1 / 0.8e1 * t4 / t5 * t20 * t21 * (-0.8e1 / 0.9e1 * t228 - 0.4e1 / 0.9e1 * (-0.37170836e0 * t231 - 0.14853145700326428e0 - t233 - 0.77215461e-1 * t230 * t61 * t237 + 0.2e1 * t275) * t278 + t24 * t30 * t31 * (-0.148683344e1 * t286 - 0.104705593501958568e1 - 0.463292766e0 * t74 - 0.15443092200000000000e0 * t283 - 0.463292766e0 * t291 + 0.15e2 * t275) / t230 * t299 / 0.27e2 + 0.4e1 / 0.27e2 * t78 * p_a_cam_omega / t25 / t83 / t28 / r0 * (-0.30439865000326428e0 - t233 - 0.25738487000000000000e-1 * t283 - 0.77215461e-1 * t291 + 0.5e1 * t275) / t231 * t299 + 0.8e1 / 0.81e2 * t321 * p_a_cam_omega * t4 / t81 / t25 / t326 / t28 / t86 / r0 * (-0.51955731e-1 + t275) * t278 * t299))
res = 0.2e1 * t343
